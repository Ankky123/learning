import { useState } from "react";

function Square({ value, squareClick }) {

  return <button className="square" onClick={squareClick}>
    {value}
  </button>;
}

//Now I want to add time travel
export default function Game() {

  //the state of the board will be stored here, which will be passed as a prop to rerender
  const [history, setHistory] = useState([Array(9).fill(null)])
  const [moves, setMove] = useState([0])

  const currBoard = history[history.length - 1]

  function handlePlay(nextSquares) {
    let move = 0

    move = moves[moves.length - 1]


    setHistory([...history, nextSquares])
    setMove([...moves, move + 1])
  }

  function goToMove(move) {
    //the history have to be re-written so that currBoard is updated on re-render
    let newHistory = history.slice(0, move+1)
    setHistory(newHistory)
    let newMoves = moves.slice(0, move+1)
    setMove(newMoves)

  }

  function getList(move) {
    return <li><button onClick={() => goToMove(move)}>Go To move : {move}</button></li>
  }

  return (
    <>
      <Board squares={currBoard} onPlay={handlePlay}></Board>
      <div>
        <ul>
          <li>Game Moves</li>
          {moves.map(getList)}
        </ul>
      </div>
    </>
  )
}


function Board({ squares, onPlay }) {

  // const [squares, setSquares] = useState(Array(9).fill(null))
  const [player, setPlayer] = useState("X")

  const winner = calculateWinner(squares)

  function handleClick(index) {
    if (squares[index] || winner) {
      return
    }

    const nextSquares = squares.slice();
    let nextPlayer = ""
    if (player == "X") {
      nextSquares[index] = "X";
      nextPlayer = "O"
    } else {
      nextSquares[index] = "O";
      nextPlayer = "X"
    }
    onPlay(nextSquares)
    // setSquares(nextSquares);
    setPlayer(nextPlayer)
  }

  let gameStatus
  if (winner) {
    gameStatus = "Winner is : " + winner
  } else {
    gameStatus = "Next is : " + player
  }

  return (
    <>

      <div className="status">{gameStatus}</div>
      <div className="board-row">
        <Square value={squares[0]} squareClick={() => handleClick(0)} />
        <Square value={squares[1]} squareClick={() => handleClick(1)} />
        <Square value={squares[2]} squareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} squareClick={() => handleClick(3)} />
        <Square value={squares[4]} squareClick={() => handleClick(4)} />
        <Square value={squares[5]} squareClick={() => handleClick(5)} />
      </div><div className="board-row">
        <Square value={squares[6]} squareClick={() => handleClick(6)} />
        <Square value={squares[7]} squareClick={() => handleClick(7)} />
        <Square value={squares[8]} squareClick={() => handleClick(8)} />
      </div>
    </>
  )
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}